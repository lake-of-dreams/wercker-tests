build:
  # The build step doesn't do very much and is just a launchpad for other pipelines
  box: alpine
  steps:
    - script:
        name: Create a unique id for the run, common to all pipelines in the  workflow
        code: |
          date +%s%N > /pipeline/cache/build-id
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID
    - script:    
        name: Check environment variables
        code: |
          if [[ -z "$USERNAME" ]]; then
            echo Environment variable \$USERNAME is not set
            return 1
          fi   
          if [[ -z "$PASSWORD" ]]; then
            echo Environment variable \$PASSWORD is not set
            return 1
          fi             
test-docker-build1:
  # Test the docker-build step (part 1) 
  box: google/golang
  steps:
    - script:
        name: Get the a unique id for the run, common to all pipelines in the workflow
        code: |
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID
    - internal/docker-build: 
        dockerfile: Dockerfile 
        image-name: my-new-image # name used to refer to this image until it's pushed   
#    - internal/docker-run:
#        image: my-new-image
#        name: myTestContainer     
#    - script: 
#        name: Test the container
#        code: |
#            if curlOutput=`curl -s myTestContainer:5000`; then 
#                if [ "$curlOutput" == "Hello World!!" ]; then
#                    echo "Test passed: container gave expected response"
#                else
#                    echo "Test failed: container gave unexpected response: " $curlOutput
#                    exit 1
#                fi   
#            else 
#                echo "Test failed: container did not respond"
#                exit 1
#            fi        
#    - internal/docker-kill:
#        name: myTestContainer               
    - internal/docker-push: 
        image-name: my-new-image
        username: $USERNAME # Docker Hub username. When using CLI, set using "export X_USERNAME=<username>"  
        password: $PASSWORD # Docker Hub password. When using CLI, set using "export X_PASSWORD=<password>" 
        repository: docker.io/$USERNAME/wercker-test
        tag: test-docker-build1
test-docker-build2:
  # Test the docker-build step (part 2)
  # Test that we can pull the newly-created image, start it and connect to it
  box: alpine
  services: 
    - name: test-container
      id: docker.io/$USERNAME/wercker-test:test-docker-build1
  steps:
    - script:
        name: Get the a unique id for the run, common to all pipelines in the workflow
        code: |
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID
    - script:
        name: Install Curl
        code: apk --no-cache add curl 
    - script: 
        name: Test the container
        code: |
            curl test-container:5000
            if curlOutput=`curl -s test-container:5000`; then 
                if [ "$curlOutput" == "Hello World!!" ]; then
                    echo "Test passed: container gave expected response"
                else
                    echo "Test failed: container gave unexpected response: " $curlOutput
                    exit 1
                fi   
            else 
                echo "Test failed: container did not respond"
                exit 1
            fi               