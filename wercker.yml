build: 
  # The build step doesn't do very much 
  # It runs the unit tests and is a common prerequisite for all subsequent pipelines
  box: google/golang
  steps:
    - script:
        name: Create a unique id for the run, common to all pipelines in the  workflow
        code: |
          date +%s%N > /pipeline/cache/build-id
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID
    - script:    
        name: Check environment variables
        code: |
          if [[ -z "$USERNAME" ]]; then
            echo Environment variable \$USERNAME is not set
            return 1
          fi   
          if [[ -z "$PASSWORD" ]]; then
            echo Environment variable \$PASSWORD is not set
            return 1
          fi   
    - script:
        name: Edit source to add build ID
        # this is so we can be sure that we are testing the right version of our images
        code: |
          sed -i "s/Hello World!!/Hello World!! ${BUILDID}/g" main.go   
          cat main.go          
    - script:
        name: Copy contents of repository to /pipeline/output for next pipeline to use
        code: cp -r /pipeline/source/* /pipeline/output
    - script: 
        name: Run the unit tests
        code: |
          go test ./...            
test-docker-build1:
  # Test the docker-build step (part 1) 
  box: google/golang
  steps:
    - script:
        name: Get the a unique id for the run, common to all pipelines in the workflow
        code: |
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID
    - internal/docker-build: 
        dockerfile: Dockerfile 
        image-name: my-new-image # name used to refer to this image until it's pushed   
#    - internal/docker-run:
#        image: my-new-image
#        name: myTestContainer     
#    - script: 
#        name: Test the container
#        code: |
#            if curlOutput=`curl -s myTestContainer:5000`; then 
#                if [ "$curlOutput" == "Hello World!!" ]; then
#                    echo "Test passed: container gave expected response"
#                else
#                    echo "Test failed: container gave unexpected response: " $curlOutput
#                    exit 1
#                fi   
#            else 
#                echo "Test failed: container did not respond"
#                exit 1
#            fi        
#    - internal/docker-kill:
#        name: myTestContainer               
    - internal/docker-push: 
        image-name: my-new-image
        username: $USERNAME # Docker Hub username. When using CLI, set using "export X_USERNAME=<username>"  
        password: $PASSWORD # Docker Hub password. When using CLI, set using "export X_PASSWORD=<password>" 
        repository: docker.io/$USERNAME/wercker-test
        tag: test-docker-build
test-docker-build2:
  # Test the docker-build step (part 2)
  # Test that we can pull the newly-created image, start it and connect to it
  box: alpine
  services: 
    - name: test-docker-build-container
      id: docker.io/$USERNAME/wercker-test:test-docker-build
      ports:
        - "5000"
  steps:
    - script:
        name: Get the a unique id for the run, common to all pipelines in the workflow
        code: |
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID         
    - script:
        name: Install Curl
        code: apk --no-cache add curl 
    - script: 
        name: Wait for container to start 
        code: | 
          until $(curl --output /dev/null --silent --head --fail http://test-docker-build-container:5000); do printf '.'; sleep 5; done 
    - script: 
        name: Test the container
        code: |
            if curlOutput=`curl -s test-docker-build-container:5000`; then 
                export expected="Hello World!! $BUILDID"
                if [ "$curlOutput" == "$expected" ]; then
                    echo "Test passed: container gave expected response: " $expected
                else
                    echo "Test failed: container gave unexpected response: " $curlOutput
                    echo "The expected response was: " $expected
                    exit 1
                fi   
            else 
                echo "Test failed: container did not respond"
                exit 1
            fi               
test-docker-push-classic1:
  # Test the "classic" docker-push step (which commits the current container) (part 1) 
  box: google/golang
  steps:
    - script:
        name: Get the a unique id for the run, common to all pipelines in the workflow
        code: |
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID
    - script:
        name: Build the executable. This will be run in a golang base image created by committing the current container, so no need to worry about dependencies
        code: |
          go build -o myapp 
          echo veryfying build
          pwd
          ls -l           
    - internal/docker-push: 
        username: $USERNAME # Docker Hub username. When using CLI, set using "export X_USERNAME=<username>"  
        password: $PASSWORD # Docker Hub password. When using CLI, set using "export X_PASSWORD=<password>" 
        repository: docker.io/$USERNAME/wercker-test
        tag: test-docker-push-classic
        cmd: /pipeline/source/myapp
        ports: "5000"
test-docker-push-classic2:
  # Test the "classic" docker-push step (which commits the current container) (part 2) 
  # Test that we can pull the newly-created image, start it and connect to it
  box: alpine
  services: 
    - name: test-docker-classic-push-container
      id: docker.io/$USERNAME/wercker-test:test-docker-push-classic
      ports:
        - "5000"
  steps:
    - script:
        name: Get the a unique id for the run, common to all pipelines in the workflow
        code: |
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID       
    - script:
        name: Install Curl
        code: apk --no-cache add curl 
    - script: 
        name: Wait for container to start 
        code: | 
          until $(curl --output /dev/null --silent --head --fail http://test-docker-classic-push-container:5000); do printf '.'; sleep 5; done 
    - script: 
        name: Test the container
        code: |
            if curlOutput=`curl -s test-docker-classic-push-container:5000`; then 
                export expected="Hello World!! $BUILDID"
                if [ "$curlOutput" == "$expected" ]; then
                    echo "Test passed: container gave expected response: " $expected
                else
                    echo "Test failed: container gave unexpected response: " $curlOutput
                    echo "The expected response was: " $expected
                    exit 1
                fi   
            else 
                echo "Test failed: container did not respond"
                exit 1
            fi     
test-docker-scratch-push1:
  # Test the docker-scratch-push step (which copies the output to a scratch image) (part 1) 
  box: google/golang
  steps:
    - script:
        name: Get the a unique id for the run, common to all pipelines in the workflow
        code: |
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID
    - script:
        name: Build the executable. 
        code: |
          # This will be run in a minimal image so must not have any dependencies
          CGO_ENABLED=0 go build -a -ldflags '-s' -installsuffix cgo -o /pipeline/output/myapp .
    - internal/docker-scratch-push: 
        username: $USERNAME # Docker Hub username. When using CLI, set using "export X_USERNAME=<username>"  
        password: $PASSWORD # Docker Hub password. When using CLI, set using "export X_PASSWORD=<password>" 
        repository: docker.io/$USERNAME/wercker-test
        tag: test-docker-scratch-push
        cmd: /myapp
        ports: "5000/tcp,"        
test-docker-scratch-push2:
  # Test the docker-scratch-push step (which copies the output to a scratch image) (part 2) 
  # Test that we can pull the newly-created image, start it and connect to it
  box: alpine
  services: 
    - name: test-docker-scratch-push-container
      id: docker.io/$USERNAME/wercker-test:test-docker-scratch-push
      ports:
        - "5000"
  steps:
    - script:
        name: Get the a unique id for the run, common to all pipelines in the workflow
        code: |
          export BUILDID=`cat /pipeline/cache/build-id`
          echo BUILDID=$BUILDID        
    - script:
        name: Install Curl
        code: apk --no-cache add curl 
    - script: 
        name: Wait for container to start 
        code: | 
          until $(curl --output /dev/null --silent --head --fail http://test-docker-scratch-push-container:5000); do printf '.'; sleep 5; done 
    - script: 
        name: Test the container
        code: |
            if curlOutput=`curl -s test-docker-scratch-push-container:5000`; then 
                export expected="Hello World!! $BUILDID"
                if [ "$curlOutput" == "$expected" ]; then
                    echo "Test passed: container gave expected response: " $expected
                else
                    echo "Test failed: container gave unexpected response: " $curlOutput
                    echo "The expected response was: " $expected
                    exit 1
                fi   
            else 
                echo "Test failed: container did not respond"
                exit 1
            fi                              